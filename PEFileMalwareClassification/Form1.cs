using PEFileMalwareClassification.dtos;
using PEFileMalwareClassification.models;
using PEFileMalwareClassification.models.random_forest;
using PEFileMalwareClassification.utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace PEFileMalwareClassification
{
    public partial class Form1 : Form
    {
        private IModel model;
        private List<Result> results = new List<Result>();
        public Form1()
        {
            InitializeComponent();

            comboBox1.SelectedIndex = 0;
            model = getModel();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            lbTotolFile.Text = "0";
            lbTotalMalware.Text = "0";
            lbTotalPeFile.Text = "0";
            lbTotalError.Text = "0";
            int totalMalware = 0;
            int totalPeFile = 0;
            int totalError = 0;
            if (textBox1.Text == "") {
                MessageBox.Show("Thư mục/File không tồn tại!", "Lỗi");
                return;
            }
            List<string> files = FileUtils.GetAllFiles(textBox1.Text);
            if (files.Count == 0)
            {
                MessageBox.Show("Thư mục/File không tồn tại!", "Lỗi");
                return;
            }
            // Thực hiện quét mã độc
            results = new List<Result>();
            for (int i = 0; i < files.Count; i++)
            {
                string path = files[i];
                if (FileUtils.IsPeFile(path))
                {
                    try
                    {
                        totalPeFile++;
                        float[] vector = model.ExtractFeatures(path);
                        float[] output = model.Predict(vector);
                        Result result = new Result();
                        result.No = i + 1;
                        result.File = path;
                        if (output[0] != 0)
                        {
                            totalMalware++;
                            result.Type = "Mã độc";
                        }
                        else
                        {
                            result.Type = "Mã sạch";
                        }
                        results.Add(result);
                    }
                    catch (Exception exp)
                    {
                        Console.WriteLine(exp.Message);
                        totalError++;
                        results.Add(new Result(i + 1, path, "Lỗi"));
                    }
                }
                else
                {
                    results.Add(new Result(i + 1, path, "Không phải PeFile"));
                }
            }
            lbTotolFile.Text = String.Format("{0}", files.Count);
            lbTotalMalware.Text = String.Format("{0}", totalMalware);
            lbTotalPeFile.Text = String.Format("{0}", totalPeFile);
            lbTotalError.Text = String.Format("{0}", totalError);
            MessageBox.Show(String.Format("Đã phát hiện {0} mã độc!", totalMalware), "Thông báo");
        }

        private IModel getModel()
        {
            switch(comboBox1.SelectedIndex)
            {
                case 0:
                    return new ModelRandomForest();
            }
            return null;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            openFileDialog1.ShowDialog(this);
        }

        private void openFileDialog1_FileOk(object sender, System.ComponentModel.CancelEventArgs e)
        {
            textBox1.Text = openFileDialog1.FileName;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            model = getModel();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            FormDetail form = new FormDetail(results);
            form.ShowDialog();
        }

        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            AdminLogin f = new AdminLogin();
            f.Show();
        }
    }
}
